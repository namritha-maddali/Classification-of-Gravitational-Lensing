'''
Initial Residual Block -
class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride = 1, downsample = None):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Sequential(
                     nn.Conv2d(in_channels, out_channels, kernel_size = 3, stride = stride, padding = 1, bias=False),
                     nn.BatchNorm2d(out_channels),
                     nn.ReLU(inplace=True))

        self.conv2 = nn.Sequential(
                     nn.Conv2d(out_channels, out_channels, kernel_size = 3, stride = 1, padding = 1, bias=False),
                     nn.BatchNorm2d(out_channels))

        self.downsample = downsample
        self.relu = nn.ReLU(inplace=True)
        self.out_channels = out_channels

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.conv2(out)
        if self.downsample:
            residual = self.downsample(x)
        out += residual
        return self.relu(out)
'''

# giving the residual block a bottle neck architecture (like resnet 50)
class ResidualBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride = 1, downsample = None):
        super(ResidualBlock, self).__init__()
        self.conv1 = nn.Sequential(
                     nn.Conv2d(in_channels, out_channels // 4, kernel_size = 1, stride = 1, bias=False),
                     nn.BatchNorm2d(out_channels // 4),
                     nn.ReLU(inplace=True))

        # the bottle neck
        self.conv2 = nn.Sequential(
                     nn.Conv2d(out_channels // 4, out_channels // 4, kernel_size = 3, stride = stride, padding = 1, bias=False),
                     nn.BatchNorm2d(out_channels // 4),
                     nn.ReLU(inplace=True))

        self.conv3 = nn.Sequential(
                     nn.Conv2d(out_channels // 4, out_channels, kernel_size = 1, stride = 1, bias=False),
                     nn.BatchNorm2d(out_channels))

        self.downsample = downsample
        self.relu = nn.ReLU(inplace=True)
        self.out_channels = out_channels

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.conv2(out)
        out = self.conv3(out)

        if self.downsample:
            residual = self.downsample(x)
        out += residual
        return self.relu(out)
